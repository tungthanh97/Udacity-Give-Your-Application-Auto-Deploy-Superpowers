version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
      repository:
        type: string
        default: udapeople-458213063224
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroy environment: << parameters.workflow_id >> "
            aws s3 rm s3://<< parameters.repository >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            rm ~/project/.circleci/ansible/inventory.txt
            rm ~/project/frontend/package-lock.json  
            rm ~/project/backend/package-lock.json 


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            ls -ltr
            if [ ! -d "node_modules" ]; then
              # npm update && npm upgrade
              npm install
              npm run build
            fi
      - save_cache:
          paths: [~/project/frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Create db env variable
          command: |
            cd backend 
            if [ ! -d "node_modules" ]; then
              # npm update && npm upgrade &&
              npm install &&
              npm run build
            fi
      - save_cache:
          paths: [~/project/backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [frontend-build]
        # Your job code here
        - run: 
            name: Run frontend test
            command: |
              cd frontend
              npm run test
  
  test-backend:
      docker:
       # Docker image here
       - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [backend-build]
        # Your job code here
        - run: 
            name: Run backend test
            command: |
              cd backend
              npm run test  
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit --audit-level=critical || (npm audit fix --audit-level=critical --force && npm audit fix --audit-level=critical --force && npm audit --audit-level=critical)

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit --audit-level=critical || (npm audit fix --audit-level=critical --force && npm audit fix --audit-level=critical --force && npm audit --audit-level=critical)
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git 
      - checkout
      - run: 
          name: install dependencies # gzip and tar
          command: |
              yum update
              yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            instance_ip=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            echo "$instance_ip" >> ~/project/.circleci/ansible/inventory.txt 
            echo "Instance IP: $instance_ip"
            echo "Inventory file output:"
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.12
      executor: aws-cli/default  
      steps:áº¯ 
        - checkout
        - add_ssh_keys:
            fingerprints:
              - 86:cf:5c:5c:cf:d3:3e:18:1b:63:c8:2f:c2:4a:05:34
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            working_directory: ./.circleci/ansible
            command: |
              apk add --update ansible
        - run:
            name: Configure server
            command: |
              echo PWD $(pwd)
              echo $TYPEORM_HOST
              cd backend
              touch .env
              echo ENVIRONMENT=production >> .env"
              echo NODE_ENV=production >> .env"
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
              echo TYPEORM_PORT=$TYPEORM_PORT >> .env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
              echo ~/project/backend/.env
              cd ~/project/.circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
              pwd
              cat ~/project/backend/.env
        - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
